import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { ItemModal } from "../components/itemModal";
import { HiX } from "react-icons/hi";

import { api } from "../utils/api";

const Home: NextPage = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  const { data: items, isSuccess, isLoading } = api.item.getItems.useQuery();
  // debugger;
  ``;
  // With the use of the utils object, we can invalidate the cache for the getItems query
  const utils = api.useContext();

  // Delete item mutation
  // We can also invalidate the cache for the getItems query when the mutation is successful
  const deleteItem = api.item.deleteItem.useMutation({
    onSuccess: () => {
      utils.item.getItems.invalidate().catch((e) => {
        console.error(e);
      });
    },
  });

  // Toggle checked mutation
  const toggleChecked = api.item.toggleChecked.useMutation({
    onSuccess: () => {
      utils.item.getItems.invalidate().catch((e) => {
        console.error(e);
      });
    },
  });

  return (
    <>
      <Head>
        <title>T3 Shopping List</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {isModalOpen && <ItemModal setIsModalOpen={setIsModalOpen} />}

      <main className="relative flex w-full items-start justify-center">
        <div className="relative mt-14 flex w-full max-w-2xl flex-col border border-solid border-black">
          <div className="flex justify-between p-5">
            <h2 className="mx-3 text-2xl font-semibold">BG Shopping List</h2>
            <button
              type="button"
              onClick={() => setIsModalOpen(true)}
              className="rounded-md border border-solid border-slate-400 bg-slate-600 p-2 text-slate-300 transition hover:bg-slate-700 hover:shadow-md"
            >
              Add Shopping Item
            </button>
          </div>
          {isSuccess && (
            <ul className="p-5 text-2xl">
              {items?.map((item) => {
                const { id, name, checked } = item;
                return (
                  <li
                    key={id}
                    className="flex items-center justify-between rounded-md bg-slate-400/0 transition-all duration-500 hover:bg-slate-400/50"
                  >
                    <span
                      className={`mx-3 cursor-pointer transition-all duration-500 hover:-translate-y-0.5  hover:p-1 hover:text-slate-200
                    ${checked ? "line-through" : ""}`}
                      onClick={() =>
                        toggleChecked.mutate({
                          id,
                          checked: (() => {
                            return !checked;
                          })(),
                        })
                      }
                    >
                      {name}
                    </span>
                    <HiX
                      className="cursor-pointer text-2xl text-orange-900 transition-transform duration-500 hover:scale-125 hover:text-orange-400"
                      onClick={() => deleteItem.mutate({ id })}
                    />
                  </li>
                );
              })}
            </ul>
          )}
          {isLoading && <div className="p-6 font-bold">Loading...</div>}
        </div>
      </main>
      <div className="relative h-14"> </div>
    </>
  );
};

export default Home;
